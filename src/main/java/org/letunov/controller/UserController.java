package org.letunov.controller;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import org.letunov.domainModel.Group;
import org.letunov.domainModel.User;
import org.letunov.service.GroupService;
import org.letunov.service.RoleService;
import org.letunov.service.UserService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import java.util.ArrayList;
import java.util.List;

@Controller
@RequestMapping("/users")
public class UserController
{
    private final UserService userService;
    private final RoleService roleService;
    private boolean isUserJustCreated = false;
    private String generatedPassword = "";
    private String generatedLogin = "";
    public UserController(UserService userService, RoleService roleService)
    {
        this.roleService = roleService;
        this.userService = userService;
    }

    @ModelAttribute
    public void ifCreated(Model model)
    {
        if (isUserJustCreated)
        {
            model.addAttribute("generatedPassword", generatedPassword);
            model.addAttribute("generatedLogin", generatedLogin);
            generatedPassword = "";
            generatedLogin = "";
            isUserJustCreated = false;
        }
    }

    @GetMapping("/manage")
    public String getUsersManagePage(Model model)
    {
        List<Category> categories = new ArrayList<>();
        categories.add(new Category("http://localhost:8888/EducationSchedule/users/manage/teachers", "Преподаватели"));
        categories.add(new Category("http://localhost:8888/EducationSchedule/users/manage/students", "Студенты"));
        categories.add(new Category("http://localhost:8888/EducationSchedule/users/manage/admins", "Администраторы"));
        model.addAttribute("categories", categories);
        return "usersCategories";
    }
    @GetMapping("/manage/teachers")
    public String getTeachersManagePage(Model model)
    {
        User newUser = new User();
        newUser.setRole(roleService.getRoleByName("teacher"));
        model.addAttribute("newUser", newUser);
        model.addAttribute("users", userService.getTeachersList());
        return "userManage";
    }
    @PostMapping("/manage")
    public String createNewUser(User user)
    {
        user = userService.createUserWithAutoGeneratedLoginAndPassword(user);
        isUserJustCreated = true;
        generatedPassword = userService.getLastAutogeneratedPassword();
        generatedLogin = user.getLogin();
        return switch (user.getRole().getName()) {
            case "teacher" -> "redirect: /EducationSchedule/users/manage/teachers";
            case "admin" -> "redirect: /EducationSchedule/users/manage/admins";
            case "student" -> "redirect: /EducationSchedule/users/manage/students";
            default -> "redirect: /EducationSchedule/users/manage";
        };
    }
    @GetMapping("/manage/teachers/{id}")
    public String getTeacherManagePage(Model model)
    {

        return null;
    }
    @GetMapping("/manage/students")
    public String getStudentsManagePage(Model model)
    {
        User newUser = new User();
        newUser.setRole(roleService.getRoleByName("student"));
        model.addAttribute("newUser", newUser);
        model.addAttribute("users", userService.getStudentsList());
        return "userManage";
    }
    @GetMapping("/manage/students/{id}")
    public String getStudentManagePage(Model model)
    {

        return null;
    }
    @GetMapping("/manage/admins")
    public String getAdminsManagePage(Model model)
    {
        User newUser = new User();
        newUser.setRole(roleService.getRoleByName("admin"));
        model.addAttribute("newUser", newUser);
        model.addAttribute("users", userService.getAdminsList());
        return "userManage";
    }
    @GetMapping("/manage/admins/{id}")
    public String getAdminManagePage(Model model)
    {

        return null;
    }

    @Getter
    @Setter
    @AllArgsConstructor
    private static class Category
    {
        private String href;
        private String name;
    }
}
