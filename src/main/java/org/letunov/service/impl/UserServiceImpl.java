package org.letunov.service.impl;


import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.letunov.controller.AuthorizationController;
import org.letunov.dao.UserDao;
import org.letunov.domainModel.User;
import org.letunov.service.UserService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Random;

@Service
@Slf4j
public class UserServiceImpl implements UserService
{
    final PasswordEncoder passwordEncoder;
    final private UserDao userDao;
    private String lastAutogeneratedPassword = "";

    public UserServiceImpl(UserDao userDao, PasswordEncoder passwordEncoder)
    {
        this.userDao = userDao;
        this.passwordEncoder = passwordEncoder;
    }
    @Override
    public String getLastAutogeneratedPassword()
    {
        String password = lastAutogeneratedPassword;
        lastAutogeneratedPassword = "";
        return password;
    }

    @Override
    public User getAuthenticatedUser()
    {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication.isAuthenticated() && authentication.getPrincipal() instanceof UserDetails)
            return  userDao.findByLogin(((UserDetails) authentication.getPrincipal()).getUsername());
        return null;
    }

    @Override
    public User getById(long id)
    {
        User user = userDao.findById(id);
        if (user == null)
            throw new NoSuchElementException("Пользователь с таким id не существует");
        return user;
    }

    @Override
    public boolean isAllowDeleteUser(long id) {
        User authenticatedUser = getAuthenticatedUser();
        User user = getById(id);
        int adminsCount = getAdminsList().size();
        return authenticatedUser != null &&
                ((authenticatedUser.getRole().getName().equals("admin") && !user.getRole().getName().equals("admin")) ||
                        (authenticatedUser.getRole().getName().equals("admin") && authenticatedUser.getId() == user.getId() && adminsCount > 1));
    }

    @Override
    public ResponseEntity<Object> deleteUser(long id)
    {
        userDao.deleteById(id);
        return ResponseEntity.noContent().build();
    }

    @Override
    public List<User> getTeachersList()
    {
        return userDao.findByRole("teacher");
    }

    @Override
    public List<User> getStudentsList() {
        return userDao.findByRole("student");
    }

    @Override
    public List<User> getAdminsList() {
        return userDao.findByRole("admin");
    }

    @Override
    public User createUserWithAutoGeneratedLoginAndPassword(User user)
    {
        PasswordGenerator passwordGenerator = new PasswordGenerator();
        LoginGenerator loginGenerator = new LoginGenerator();
        String password = passwordGenerator.generatePassword(12);
        String login;
        do {
            login = loginGenerator.generateLogin();
        } while (userDao.findByLogin(login) != null);
        lastAutogeneratedPassword = password;
        user.setPassword(passwordEncoder.encode(password));
        user.setLogin(login);
        return userDao.save(user);
    }

    private static class PasswordGenerator
    {
        private static final String LOWER = "abcdefghijklmnopqrstuvwxyz";
        private static final String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        private static final String DIGITS = "0123456789";
        private static final String PUNCTUATION = "!@#$%&*()_+-=[]|,./?><";

        public String generatePassword(int length)
        {
            Random random = new Random();
            StringBuilder password = new StringBuilder();
            for (int i = 0; i < length; i++)
            {
                int charType = random.nextInt(0, 3);
                switch (charType)
                {
                    case 0:
                        password.append(LOWER.charAt(random.nextInt(0, LOWER.length()-1)));
                        break;
                    case 1:
                        password.append(UPPER.charAt(random.nextInt(0, UPPER.length()-1)));
                        break;
                    case 2:
                        password.append(DIGITS.charAt(random.nextInt(0, DIGITS.length()-1)));
                        break;
                    case 3:
                        password.append(PUNCTUATION.charAt(random.nextInt(0, PUNCTUATION.length()-1)));
                        break;
                }
            }
            return  new String(password);
        }
    }

    private static class LoginGenerator
    {
        private static final String LOWER = "abcdefghijklmnopqrstuvwxyz";
        private static final String DIGITS = "0123456789";
        public String generateLogin()
        {
            int length = 10;
            Random random = new Random();
            StringBuilder login = new StringBuilder();
            for (int i = 0; i < length; i++)
            {
                int charType = random.nextInt(0, 1);
                switch (charType)
                {
                    case 0:
                        login.append(LOWER.charAt(random.nextInt(0, LOWER.length()-1)));
                        break;
                    case 1:
                        login.append(DIGITS.charAt(random.nextInt(0, DIGITS.length()-1)));
                        break;
                }
            }
            return new String(login);
        }
    }
}
